Description: Make ncal work with UTF-8.
Author: Michael Meskes <meskes@debian.org>

--- freebsd/usr.bin/ncal/ncal.c	2011-01-03 13:09:12.000000000 +0100
+++ bsdmainutils/usr.bin/ncal/ncal.c	2011-01-03 13:15:27.000000000 +0100
@@ -29,7 +29,7 @@
   "$FreeBSD$";
 #endif /* not lint */
 
-#include <calendar.h>
+#include "calendar.h"
 #include <ctype.h>
 #include <err.h>
 #include <langinfo.h>
@@ -520,7 +520,7 @@
 	int n;	/* number of lines to print */
 	int m;	/* offset from left to right table entry on the same line */
 
-#define FSTR "%c%s %-15s%4d-%02d-%02d"
+#define FSTR L"%c%s %-15s%4d-%02d-%02d"
 #define DFLT(p) ((p) == dftswitch ? '*' : ' ')
 #define FSTRARG(p) DFLT(p), (p)->cc, (p)->nm, (p)->dt.y, (p)->dt.m, (p)->dt.d
 
@@ -528,9 +528,9 @@
 	m = (n + 1) / 2;
 	n /= 2;
 	for (p = switches; p != switches + n; p++)
-		printf(FSTR"     "FSTR"\n", FSTRARG(p), FSTRARG(p+m));
+		wprintf(FSTR"     "FSTR"\n", FSTRARG(p), FSTRARG(p+m));
 	if (m != n)
-		printf(FSTR"\n", FSTRARG(p));
+		wprintf(FSTR"\n", FSTRARG(p));
 }
 
 /* Print the date of easter sunday. */
@@ -540,10 +540,14 @@
 	date    dt;
 	struct tm tm;
 	char    buf[MAX_WIDTH];
+#ifndef D_MD_ORDER
+	static int d_first = 1; /* XXX */
+#else
 	static int d_first = -1;
 
 	if (d_first < 0)
 		d_first = (*nl_langinfo(D_MD_ORDER) == 'd');
+#endif
 	/* force orthodox easter for years before 1583 */
 	if (y < 1583)
 		orthodox = 1;
@@ -561,7 +565,7 @@
 	tm.tm_mon  = dt.m - 1;
 	tm.tm_mday = dt.d;
 	strftime(buf, sizeof(buf), d_first ? "%e %B %Y" : "%B %e %Y",  &tm);
-	printf("%s\n", buf);
+	wprintf(L"%s\n", buf);
 }
 
 #define MW(mw, me)		((mw) + me)
@@ -625,26 +629,26 @@
 
 		/* Empty line between two rows of months */
 		if (m != m1)
-			printf("\n");
+			wprintf(L"\n");
 
 		/* Year at the top. */
 		if (printyearheader && M2Y(m) != prevyear) {
 			sprintf(s, "%d", M2Y(m));
-			printf("%s\n", center(t, s, mpl * mw));
+			wprintf(L"%s\n", center(t, s, mpl * mw));
 			prevyear = M2Y(m);
 		}
 
 		/* Month names. */
 		for (i = 0; i < count; i++)
 			if (printyearheader)
 				wprintf(L"%-*ls  ",
 				    mw, wcenter(ws, year[i].name, mw));
 			else {
				swprintf(ws, sizeof(ws)/sizeof(ws[0]),
 				    L"%-ls %d", year[i].name, M2Y(m + i));
 				wprintf(L"%-*ls  ", mw, wcenter(ws1, ws, mw));
 			}
-		printf("\n");
+		wprintf(L"\n");
 
 		/* Day of the week names. */
 		for (i = 0; i < count; i++) {
@@ -654,15 +658,15 @@
 				wdss, wds.names[3], wdss, wds.names[4],
 				wdss, wds.names[5]);
 		}
-		printf("\n");
+		wprintf(L"\n");
 
 		/* And the days of the month. */
 		for (i = 0; i != 6; i++) {
 			for (j = 0; j < count; j++)
-				printf("%-*s  ",
+				wprintf(L"%-*s  ",
 				    MW(mw, year[j].extralen[i]),
 					year[j].lines[i]+1);
-			printf("\n");
+			wprintf(L"\n");
 		}
 
 		m += mpl;
@@ -712,12 +716,12 @@
 
 		/* Empty line between two rows of months. */
 		if (m != m1)
-			printf("\n");
+			wprintf(L"\n");
 
 		/* Year at the top. */
 		if (printyearheader && M2Y(m) != prevyear) {
 			sprintf(s, "%d", M2Y(m));
-			printf("%s\n", center(t, s, mpl * mw));
+			wprintf(L"%s\n", center(t, s, mpl * mw));
 			prevyear = M2Y(m);
 		}
 
@@ -729,7 +733,7 @@
 			else
 				wprintf(L"%-ls %-*d", year[i].name,
 				    mw - wcslen(year[i].name) - 1, M2Y(m + i));
-		printf("\n");
+		wprintf(L"\n");
 
 		/* And the days of the month. */
 		for (i = 0; i != 7; i++) {
@@ -738,18 +742,18 @@
 
 			/* Full months */
 			for (j = 0; j < count; j++)
-				printf("%-*s",
+				wprintf(L"%-*s",
 				    MW(mw, year[j].extralen[i]),
 					year[j].lines[i]);
-			printf("\n");
+			wprintf(L"\n");
 		}
 
 		/* Week numbers. */
 		if (flag_weeks) {
-			printf("  ");
+			wprintf(L"  ");
 			for (i = 0; i < count; i++)
-				printf("%-*s", mw, year[i].weeks);
-			printf("\n");
+				wprintf(L"%-*s", mw, year[i].weeks);
+			wprintf(L"\n");
 		}
 
 		m += mpl;
@@ -777,7 +777,7 @@
 	memset(&tm, 0, sizeof(tm));
 	tm.tm_mon = m;
 	wcsftime(mlines->name, sizeof(mlines->name) / sizeof(mlines->name[0]),
-		 L"%OB", &tm);
+		 L"%B", &tm);
 	mlines->name[0] = towupper(mlines->name[0]);
 
 	/*
@@ -876,7 +876,7 @@
 	memset(&tm, 0, sizeof(tm));
 	tm.tm_mon = m;
 	wcsftime(mlines->name, sizeof(mlines->name) / sizeof(mlines->name[0]),
-		 L"%OB", &tm);
+		 L"%B", &tm);
 	mlines->name[0] = towupper(mlines->name[0]);
 
 	/*
